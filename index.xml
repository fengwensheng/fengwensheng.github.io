<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>我就随便说说</title>
    <link>https://fengwensheng.github.io/</link>
    <description>Recent content on 我就随便说说</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Aug 2020 14:12:19 +0800</lastBuildDate>
    
	<atom:link href="https://fengwensheng.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Wireshark抓包</title>
      <link>https://fengwensheng.github.io/post/wireshark/</link>
      <pubDate>Sat, 01 Aug 2020 14:12:19 +0800</pubDate>
      
      <guid>https://fengwensheng.github.io/post/wireshark/</guid>
      <description>在用Flutter开发App时，需要用到抓包工具。 并且不像Web应用开发：直接使用Chrome的调试工具即可，那么方便。故有必要探索一下。
Mac下不久前也有了，据说在Win下比较有名的抓包工具&amp;ndash;Fiddler。
但是，使用了一段时间后，我的心情十分复杂&amp;hellip;
最终，决定祭出尘封已久的Wireshark。
首先，在用Fiddler等时，还是比较麻烦的。第一，需要在Dio中配置代理的ip和端口号。第二，每次运行程序时都要确保打开了代理工具。
转成Wireshark后，没了这么强的侵入性，选择好要监听的网卡后，想抓就抓。
1.选择网卡
 Preferences -&amp;gt; Caputures
 2.过滤条件
通过设置过滤条件方便查看我们感兴趣的网络包。主要通过协议及IP来进行filter。
 http &amp;amp;&amp;amp; ip.addr==47.100.164.129
 listen协议为http且source或destination为47.100.164.129的包。
3.查看api返回的json数据
 rightClick -&amp;gt; Follow -&amp;gt; Http Stream
 最后在Wireshark上查看json数据还是不太方便，可通过一些 在线json查看网站 来进行显示处理。
工作流：通过1，2步配置好Wireshark后，通过3来查看api返回，copy一份json数据。打开json网站查看数据结构和字段名称。打开在线自动生成dart实体类的网站生成实体类来使用。
可以保存一下过滤条件，这样就不用每次输入了，直接选择对应的过滤项即可。
 filterEnterBar -&amp;gt; Manage Display Filters -&amp;gt; + name &amp;amp; filter exp
 </description>
    </item>
    
    <item>
      <title>Homebrew使用</title>
      <link>https://fengwensheng.github.io/post/homebrewusing/</link>
      <pubDate>Thu, 09 Jul 2020 00:05:06 +0800</pubDate>
      
      <guid>https://fengwensheng.github.io/post/homebrewusing/</guid>
      <description>Homebrew是Mac下非常好用的包管理工具。用于安装维护软件工具及各种编程环境。
号称 The Missing Package Manager for macOS。
1.搜索软件
 brew search softwareName
 2.查看软件的信息、版本和依赖等
 brew info softwareName
 3.安装
 brew install softwareName
brew cask install softwareName
 cask代表是有GUI的软件包。
4.更新Homebrew自己
 brew update
 5.哪些软件过时了可更新
 brew outdated
 6.更新全部软件
 brew upgrade
 7.更新某一特定软件
 brew upgrade softwareName
 8.清除所有旧版本缓存
 brew cleanup
 9.关于tap命令的使用
brew tap 用于加入一个指定包的三方仓库源，主要是来自github。当一个工具在核心库找不到时，就可以使用tap来加入其在github上的第三方仓库。
用例。如mongodb的安装。
brew core lib移除了mongodb，但github上mongodb/homebrew-brew仓库下提供了mongodb的三方。
 brew tap &amp;lt;github_user/repo&amp;gt;
brew tap mongodb/brew</description>
    </item>
    
    <item>
      <title>factory关键字</title>
      <link>https://fengwensheng.github.io/post/factoryindart/</link>
      <pubDate>Sun, 05 Jul 2020 20:16:56 +0800</pubDate>
      
      <guid>https://fengwensheng.github.io/post/factoryindart/</guid>
      <description>在Dart中提供factory关键字方便实现Singleton Pattern单例模式。单例模式确保该类在运行时只有一个实例存在，每次引用的是同一实例对象。
Dart中Singleton实现的范式如下。
1.私有命名构造器
Singleton._internal(); 2.单例成员变量
static final Singleton _singleton = Singleton._internal(); 3.工厂构造器
factory Singleton() =&amp;gt; _singleton; 值得注意的是，通常的构造器 是创建一个新的实例对象，不需要用 return 。而 factory构造器 是为了得到一个应用级的单例，需要返回这个实例对象，故使用 return。可以这么说，factory构造器是一个引用其它构造器的构造器。</description>
    </item>
    
    <item>
      <title>Git使用</title>
      <link>https://fengwensheng.github.io/post/gitusing/</link>
      <pubDate>Sun, 05 Jul 2020 10:04:10 +0800</pubDate>
      
      <guid>https://fengwensheng.github.io/post/gitusing/</guid>
      <description>记录一下常用的Git命令和操作流。
1.最常用
 git clone targetUrl
 clone远程项目到本地。clone时会一并将项目最外层的文件夹一并拉下来，不用担心会散落一地。
2.当前所在分支
 git branch
 3.历史提交记录
 git log
git log &amp;ndash;oneline
 使用 git log --oneline 查看起来更友好一些，去掉了Author和Date。Commit ID也只是显示前7位，使得一行放一条记录。
4.本地项目如何回到历史提交版本
 git reset &amp;ndash;hard commitId
 这时就可以配合查看远程服务器上的历史提交记录的命令一起使用了。
5.初始化本地仓库
 git init
 6.本地代码加入本地仓库
 git add .
 7.把本地修改提交本地版本库及备注
 git commit -m &amp;ldquo;commitString&amp;rdquo;
 8.本地库与远程平台关联
 git remote add origin targetUrl
 这个操作只需第一次push前操作一次即可。
9.推送本地提交到远程平台命令
 git push origin master
 提交到master分支。</description>
    </item>
    
    <item>
      <title>Hugo小记</title>
      <link>https://fengwensheng.github.io/post/hugoexp/</link>
      <pubDate>Sat, 31 Aug 2019 11:26:24 +0800</pubDate>
      
      <guid>https://fengwensheng.github.io/post/hugoexp/</guid>
      <description>近期想做一个个人博客，记录一些心得体会。本人素喜简约范，又要有点小GEEK。调研了一番。窍以为，静态博客构建工具HUGO配合Github托管尚可。
1. 新建一个网站项目
 hugo new site myHugoSite
 2. 选择主题
 cd themes
git clone https://github.com/yihui/hugo-ivy.git ivy
 clone项目，放入新建的名为ivy的文件夹中，最好命名为与配置文件里设的一致，这样在后续启动本地服务器调试时，不用再去具体指定。
3. 本地运行
 hugo server -D
 同时也可以用参数t指定主题：hugo server -D -t ivy。运行该命令后，便可通过访问以下地址查看实现效果：localhost:1313。这里参数-D的意思是草稿文件即draft: true的也一并渲染。
4. 生成静态网站
 hugo
 执行前确保所有要发布的页面非草稿。执行后根目录下会生成一个public目录，用于保存生成的静态网站文件。可使用Github Page服务，将生成的静态网站托管在Github上。</description>
    </item>
    
  </channel>
</rss>